import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

import warnings
warnings.filterwarnings('ignore')

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from keras.models import Sequential
from keras.layers import Dense

df = pd.read_csv('BostonHousing.csv')

df.head()
df.tail()
df.isnull().sum()
df.info
df.describe()
plt.figure(figsize=(12, 8))
sns.heatmap(df.corr(), annot=True, fmt=".2f", cmap="coolwarm")
x = df.loc[:,['lstat','ptratio','rm']]
y = df.loc[:,"medv"]
x.shape, y.shape

xtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size=0.20, random_state=10)

sc = StandardScaler()
sc.fit(xtrain)
xtrain = sc.transform(xtrain)
xtest = sc.transform(xtest)

model = Sequential()

model = Sequential()
model.add(Dense(128, input_shape=(3,), activation='relu'))
model.add(Dense(64, activation='relu'))
model.add(Dense(32, activation='relu'))
model.add(Dense(16, activation='relu'))
model.add(Dense(8, activation='relu'))
model.add(Dense(1, activation='linear'))
model.compile(optimizer='adam', loss='mse', metrics=['mae'])
model.summary()
model.fit(xtrain, ytrain, epochs=100, validation_split=0.05)

output = model.evaluate(xtest, ytest)
print(f"Mean Squared Error: {output[0]}")
print(f"Mean Absolute Error: {output[1]}")

import numpy as np

# Replace with your actual input data
new_data = np.array([[5, 15, 6]])

# Get predictions
predictions = model.predict(new_data)
print(predictions)