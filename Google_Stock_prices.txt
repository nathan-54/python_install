import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import LSTM, Dropout, Dense, Input

# Load the single dataset
df = pd.read_csv('Google_Stock_Price.csv')  # <-- single file

# Extract the 'Open' prices
prices = df[['Open']]

# Scale the data between 0 and 1
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_prices = scaler.fit_transform(prices)

# Visualize the scaled prices
plt.plot(scaled_prices)
plt.title("Scaled Google Stock Prices")
plt.xlabel("Time")
plt.ylabel("Scaled Price")
plt.show()

# Split the data into training and testing
time_step = 120
train_size = int(len(scaled_prices) * 0.8)
train_data = scaled_prices[:train_size]
test_data = scaled_prices[train_size - time_step:]  # include back window

# Create sequences for LSTM
def create_sequences(data, time_step=120):
    x, y = [], []
    for i in range(time_step, len(data)):
        x.append(data[i-time_step:i, 0])
        y.append(data[i, 0])
    return np.array(x), np.array(y)

x_train, y_train = create_sequences(train_data, time_step)
x_test, y_test = create_sequences(test_data, time_step)

# Reshape for LSTM input: (samples, time_steps, features)
x_train = x_train.reshape((x_train.shape[0], x_train.shape[1], 1))
x_test = x_test.reshape((x_test.shape[0], x_test.shape[1], 1))

# Build the LSTM model
model = Sequential([
    Input(shape=(x_train.shape[1], 1)),
    LSTM(100, activation='tanh', return_sequences=True),
    Dropout(0.3),
    LSTM(100, activation='tanh'),
    Dropout(0.3),
    Dense(1)
])

model.compile(optimizer='adam', loss='mae')
model.summary()

# Train the model
model.fit(x_train, y_train, epochs=200, batch_size=50, validation_split=0.05)

# Predict using the test set
y_pred = model.predict(x_test)
y_pred = scaler.inverse_transform(y_pred)  # convert back to original scale
y_test_actual = scaler.inverse_transform(y_test.reshape(-1, 1))

# Evaluate model
output = model.evaluate(x_test, y_test)

# Plot the results
plt.plot(y_test_actual, color='red', label='Real Stock Price')
plt.plot(y_pred, color='blue', label='Predicted Stock Price')
plt.title('Google Stock Price Prediction')
plt.xlabel('Time')
plt.ylabel('Price')
plt.legend()
plt.show()
